What is the purpose of the operating system's kernel?

A) To provide an interface for users
B) To manage hardware resources
C) To execute application software
D) To store user data
Answer: B

Which of the following is not a function of an operating system?

A) Process management
B) Memory management
C) Network routing
D) File system management
Answer: C

What is the primary responsibility of the scheduler in an operating system?

A) Allocating memory resources
B) Managing input/output operations
C) Determining which process gets the CPU next
D) Handling user authentication
Answer: C

What is the purpose of a device driver in an operating system?

A) To manage peripheral devices
B) To allocate memory resources
C) To schedule CPU tasks
D) To interpret high-level programming languages
Answer: A

What is the primary function of the CPU cache in modern computer systems?

A) Storing application data temporarily
B) Accelerating data access between CPU and main memory
C) Managing peripheral devices
D) Executing machine instructions
Answer: B

Which component of a computer system is responsible for managing interrupts and coordinating hardware operations?

A) Central Processing Unit (CPU)
B) Random Access Memory (RAM)
C) Input/Output Controller (I/O Controller)
D) Power Supply Unit (PSU)
Answer: C

What role does the BIOS (Basic Input/Output System) play in the boot process of a computer?

A) Allocating memory resources
B) Loading the operating system kernel into memory
C) Initializing hardware components during startup
D) Managing file systems
Answer: C

Which of the following is NOT a type of non-volatile memory commonly used in modern computer systems?

A) Hard Disk Drive (HDD)
B) Solid State Drive (SSD)
C) Magnetic Tape
D) Dynamic Random Access Memory (DRAM)
Answer: D

Which bus standard is commonly used to connect the CPU to main memory in modern computer architectures?

A) SATA
B) PCIe
C) USB
D) DDR
Answer: D

What is the primary function of a shell in an operating system?

A) Managing hardware resources
B) Providing a user interface for accessing the kernel
C) Controlling peripheral devices
D) Executing machine code instructions
Answer: B

Which shell command is used to list the contents of a directory?

A) cd
B) mv
C) ls
D) rm
Answer: C

What is the primary purpose of a GUI in an operating system?

A) To interact with the kernel
B) To provide a text-based interface for users
C) To facilitate user interaction with the system through graphical elements
D) To manage hardware resources
Answer: C

What is the primary function of the Device Manager in an operating system?

A) Managing user accounts
B) Monitoring network traffic
C) Configuring and troubleshooting hardware devices
D) Optimizing CPU performance
Answer: C

What is the purpose of device drivers in the context of the Device Manager?

A) To physically connect devices to the computer
B) To manage power settings for hardware components
C) To provide software interfaces for interacting with hardware devices
D) To clean and optimize device performance
Answer: C

What is the primary distinction between kernel mode and user mode in an operating system?

A) Kernel mode allows direct access to hardware resources, while user mode restricts such access.
B) User mode provides higher privileges to system administrators compared to kernel mode.
C) Kernel mode prioritizes user applications over system processes, while user mode prioritizes system processes.
D) User mode is responsible for managing system memory, while kernel mode handles input/output operations.
Answer: A

Which mode restricts direct access to hardware resources and enforces process isolation for security purposes?

A) Kernel mode
B) User mode
C) Supervisor mode
D) Protected mode
Answer: B

What is the main advantage of employing separate kernel and user modes in an operating system?

A) It simplifies the process of writing device drivers.
B) It enhances system stability and security by isolating critical tasks from user applications.
C) It allows for faster execution of user programs.
D) It reduces the complexity of memory management.
Answer: B

Which term refers to the internal structure and design of a microprocessor?

A) Physical Devices
B) Microarchitecture
C) Machine Language
D) Operating System
Answer: B

What language consists of binary instructions directly executable by the CPU?

A) High-level language
B) Assembly language
C) Machine language
D) Scripting language
Answer: C

Which of the following is NOT a characteristic of microarchitecture?

A) Instruction set design
B) Processor organization
C) Cache management
D) File system structure
Answer: D

Which level of cache is closest to the CPU and typically has the smallest capacity?

A) L1 cache
B) L2 cache
C) L3 cache
D) Virtual Memory
Answer: A

Which language allows programmers to use mnemonic codes to represent machine instructions?

A) High-level language
B) Assembly language
C) Machine language
D) Scripting language
Answer: B

What is abstraction in the context of operating systems?

A) It refers to the physical components of a computer system.
B) It involves hiding complex details and providing a simplified view of resources.
C) It focuses on optimizing CPU performance.
D) It relates to the interaction between hardware and software.
Answer: B

What does abstraction provide to users and developers in operating systems?

A) Detailed insights into hardware architecture
B) Simplified and consistent interfaces
C) Access to low-level system resources
D) Real-time performance monitoring
Answer: B

Which abstraction hides the physical memory locations from the application programs?

A) CPU scheduling
B) Process management
C) Virtual memory
D) File system
Answer: C

Which abstraction allows multiple processes to run concurrently on a single CPU?

A) File system
B) Process management
C) Device drivers
D) Network protocols
Answer: B

What is the purpose of file system abstraction in operating systems?

A) To manage network connections
B) To provide a unified interface for storing and accessing data
C) To control CPU resources
D) To optimize memory allocation
Answer: B

Which abstraction is responsible for managing input/output operations between devices and the CPU?

A) Process management
B) CPU scheduling
C) Device drivers
D) Virtual memory
Answer: C

Which abstraction allows users to organize and manipulate data stored on storage devices?

A) CPU scheduling
B) Virtual memory
C) File system
D) Process management
Answer: C

Which abstraction hides the physical characteristics of peripheral devices from the application software?

A) Virtual memory
B) CPU scheduling
C) Device drivers
D) File system
Answer: C

What is the purpose of the "proc" folder in Linux?

A) It contains system binaries
B) It stores configuration files for user applications
C) It provides information about running processes and system resources
D) It hosts user home directories
Answer: C

What does the "/proc/sys" subdirectory in the "proc" folder contain?

A) Configuration files for various system services
B) Information about running processes
C) Kernel parameters and settings
D) User home directories
Answer: C

What is the purpose of the "/proc/[pid]" directories in the "proc" folder?

A) They contain information about mounted filesystems
B) They provide details about specific running processes identified by their process IDs (PIDs)
C) They store system logs
D) They contain system-wide kernel parameters
Answer: B

Which file in the "proc" folder provides information about kernel version and build parameters?

A) /proc/version
B) /proc/net
C) /proc/mounts
D) /proc/filesystems
Answer: A

In Von Neumann architecture, where are instructions and data stored?

A) In separate memory units
B) In the CPU cache
C) In registers
D) In the same memory unit
Answer: D

Which aspect of the Von Neumann architecture poses a potential bottleneck in terms of performance?

A) Separate storage and processing units
B) Integrated graphics processing
C) Parallel processing capability
D) Limited bandwidth between memory and CPU
Answer: D

What is the significance of the stored-program concept in the Von Neumann architecture?

A) It enables direct interaction with hardware components
B) It allows instructions to be stored and manipulated as data
C) It eliminates the need for input/output devices
D) It speeds up CPU processing
Answer: B

What is the primary purpose of an interrupt in operating systems?
a) To halt the execution of the current process
b) To allow a process to voluntarily relinquish control of the CPU
c) To handle asynchronous events and prioritize their processing
d) To facilitate communication between processes
Answer: c) To handle asynchronous events and prioritize their processing

In a preemptive multitasking system, what action does the operating system take upon receiving a higher-priority interrupt?
a) It completes the execution of the current process before handling the interrupt
b) It immediately switches to the execution of the interrupt handler
c) It places the interrupt in a queue and handles it after the current process completes
d) It ignores the interrupt until the current process completes
Answer: b) It immediately switches to the execution of the interrupt handler

Which of the following scenarios is an example of a non-maskable interrupt (NMI)?
a) A keyboard interrupt generated by pressing a key
b) A timer interrupt triggered by the expiration of a time slice
c) A critical hardware failure detected by the system
d) A software interrupt invoked by a system call
Answer: c) A critical hardware failure detected by the system

What mechanism is typically employed by operating systems to manage interrupt handling?
a) Polling
b) Vectoring
c) Round-robin scheduling
d) Priority inversion
Answer: b) Vectoring

In a vectored interrupt handling scheme, how is the interrupt handler determined?
a) By a fixed priority assigned to each interrupt
b) By consulting a table of pointers indexed by the interrupt number
c) By the order in which interrupts are received
d) By the interrupt controller hardware
Answer: b) By consulting a table of pointers indexed by the interrupt number

Which statement accurately describes the difference between an interrupt and a trap?
a) Traps are asynchronous events, while interrupts are synchronous.
b) Traps are handled by the operating system, while interrupts are handled by device drivers.
c) Interrupts transfer control to an external device, while traps transfer control to the operating system.
d) Interrupts are initiated by hardware, while traps are initiated by software.
Answer: d) Interrupts are initiated by hardware, while traps are initiated by software.

What is the purpose of the Interrupt Service Routine (ISR)?
a) To manage the execution of multiple processes concurrently
b) To handle the detection and acknowledgment of interrupts
c) To translate virtual memory addresses into physical memory addresses
d) To provide an interface for communication between hardware devices
Answer: b) To handle the detection and acknowledgment of interrupts

Which statement best describes Direct Memory Access (DMA) in operating systems?
a) DMA allows the CPU to directly access memory without involving the operating system.
b) DMA enables peripherals to transfer data to and from memory without CPU intervention.
c) DMA is a mechanism for virtual memory management in modern operating systems.
d) DMA is exclusively used for inter-process communication within the operating system.
Answer: b) DMA enables peripherals to transfer data to and from memory without CPU intervention.

Which of the following is NOT a benefit of using DMA?
a) Reduced CPU overhead
b) Increased data transfer speed
c) Enhanced security for memory access
d) Improved system responsiveness
Answer: c) Enhanced security for memory access

Which component of a DMA-enabled system is responsible for initiating DMA transfers?
a) Central Processing Unit (CPU)
b) Peripheral devices
c) DMA controller
d) Memory Management Unit (MMU)
Answer: b) Peripheral devices

Which CPU scheduling algorithm is designed to minimize the average turnaround time?
a) Round Robin
b) Shortest Job Next (SJN)
c) First Come, First Served (FCFS)
d) Shortest Remaining Time First (SRTF)
Answer: d) Shortest Remaining Time First (SRTF)

What is the primary objective of preemptive CPU scheduling?
a) To maximize CPU utilization
b) To minimize the response time for interactive tasks
c) To ensure fairness in CPU allocation among processes
d) To minimize the overhead of context switching
Answer: b) To minimize the response time for interactive tasks

Which factor does NOT influence the performance of CPU scheduling algorithms?
a) The number of CPUs in the system
b) The mix of CPU-bound and I/O-bound processes
c) The size of the system memory
d) The overhead of context switching
Answer: c) The size of the system memory

What is the primary drawback of using First Come, First Served (FCFS) scheduling?
a) High average waiting time
b) Poor CPU utilization
c) Indefinite blocking of low-priority processes
d) Inability to prioritize important tasks
Answer: a) High average waiting time

What is the primary purpose of the CPU dispatcher?
a) To allocate CPU resources to processes
b) To handle interrupts generated by peripheral devices
c) To manage the execution of system calls
d) To synchronize access to shared resources among processes
Answer: a) To allocate CPU resources to processes

What is the primary purpose of cache memory in operating systems?
a) To store frequently accessed data and instructions for faster access
b) To provide additional RAM for memory-intensive applications
c) To act as a buffer for disk I/O operations
d) To facilitate inter-process communication
Answer: a) To store frequently accessed data and instructions for faster access

Which cache hierarchy level typically has the smallest capacity and fastest access time?
a) L1 cache
b) L2 cache
c) L3 cache
d) Main memory
Answer: a) L1 cache

What is the primary challenge associated with cache coherence in multiprocessor systems?
a) Ensuring consistency of data between cache levels
b) Minimizing cache access latency
c) Optimizing cache replacement policies
d) Balancing the trade-off between cache size and speed
Answer: a) Ensuring consistency of data between cache levels

What is the role of the boot loader in the boot process of an operating system?
a) To initialize system hardware components
b) To load the operating system kernel into memory
c) To configure user-specific settings
d) To manage disk partitioning
Answer: b) To load the operating system kernel into memory

What is the purpose of the Master Boot Record (MBR) in the boot process?
a) To store the operating system kernel
b) To load the boot loader program
c) To partition the disk into logical units
d) To manage system hardware interrupts
Answer: b) To load the boot loader program

Which component is responsible for initiating the BIOS/UEFI firmware during the boot process?
a) Master Boot Record (MBR)
b) Boot loader
c) Kernel Loader
d) Basic Input/Output System (BIOS) or Unified Extensible Firmware Interface (UEFI)
Answer: d) Basic Input/Output System (BIOS) or Unified Extensible Firmware Interface (UEFI)

What occurs during the POST (Power-On Self-Test) phase of the boot process?
a) The operating system kernel is loaded into memory
b) System hardware components are initialized and tested
c) User-specific configuration settings are applied
d) Disk partitioning information is read from the Master Boot Record (MBR)
Answer: b) System hardware components are initialized and tested

What role does the GRUB (Grand Unified Bootloader) play in the boot process of Linux-based operating systems?
a) It initializes system hardware components
b) It loads the operating system kernel into memory
c) It manages disk partitioning and formatting
d) It provides a menu for selecting different operating system configurations
Answer: b) It loads the operating system kernel into memory

What is the purpose of the kernel loader in the boot process?
a) To initialize system hardware components
b) To configure user-specific settings
c) To load device drivers and system modules into memory
d) To manage disk partitioning and formatting
Answer: c) To load device drivers and system modules into memory

What is a characteristic of a monolithic kernel structure in operating systems?
a) It separates kernel components into individual user-space processes.
b) It provides a modular architecture with well-defined interfaces between components.
c) It consolidates all operating system functionality into a single, large binary.
d) It relies on microkernel principles for inter-process communication.
Answer: c) It consolidates all operating system functionality into a single, large binary.

In a monolithic kernel architecture, how are device drivers typically implemented?
a) As separate user-space processes
b) As dynamically loadable kernel modules
c) As standalone applications
d) As part of the kernel binary itself
Answer: d) As part of the kernel binary itself

How does a monolithic kernel handle system calls from user-space applications?
a) By delegating system call handling to separate user-space processes
b) By invoking system call handlers within the kernel address space
c) By using a message-passing mechanism between kernel modules
d) By redirecting system calls to a separate microkernel component
Answer: b) By invoking system call handlers within the kernel address space

What is a defining characteristic of a microkernel structure in operating systems?
a) It consolidates all operating system functionality into a single, large binary.
b) It allows device drivers to run in kernel-space alongside core operating system components.
c) It minimizes the kernel size by implementing only essential functions in the kernel space.
d) It relies on a monolithic architecture for efficient inter-process communication.
Answer: c) It minimizes the kernel size by implementing only essential functions in the kernel space.

In a microkernel architecture, where are device drivers typically located?
a) In the kernel space
b) In user-space as separate processes
c) In a dedicated hardware layer
d) In the firmware layer
Answer: b) In user-space as separate processes

What challenge does the microkernel architecture face in terms of performance compared to monolithic kernels?
a) Increased context switching overhead
b) Greater susceptibility to security vulnerabilities
c) Reduced flexibility for customization
d) Higher communication latency between kernel components
Answer: a) Increased context switching overhead

What role does the Inter-Process Communication (IPC) mechanism play in a microkernel?
a) It manages communication between kernel-space and user-space processes.
b) It facilitates communication between different kernel modules.
c) It coordinates memory management between the kernel and user applications.
d) It controls access to system resources such as files and devices.
Answer: b) It facilitates communication between different kernel modules.

Which approach is commonly used to extend the functionality of a microkernel-based operating system?
a) Dynamic linking of kernel modules
b) Integration of device drivers into the kernel space
c) Loading of additional kernel components at boot time
d) Running critical services as part of the kernel binary
Answer: a) Dynamic linking of kernel modules

What is a potential drawback of the microkernel architecture in terms of system performance?
a) Increased complexity of system administration
b) Higher overhead for system calls and IPC
c) Difficulty in integrating third-party device drivers
d) Limited scalability for large-scale systems
Answer: b) Higher overhead for system calls and IPC

In a layered structure of an operating system, what is the primary purpose of the hardware abstraction layer (HAL)?
a) To provide an interface for user applications to interact with the operating system.
b) To manage the execution of system calls and kernel-level tasks.
c) To facilitate communication between different layers of the operating system.
d) To abstract hardware-specific details and provide a unified interface to upper layers.
Answer: d) To abstract hardware-specific details and provide a unified interface to upper layers.

Which layer in the operating system hierarchy is responsible for managing the interaction between user applications and the kernel?
a) Kernel layer
b) Hardware abstraction layer
c) System call layer
d) Shell layer
Answer: c) System call layer

What is the primary advantage of a layered operating system structure?
a) Increased flexibility for customizing and extending system functionality
b) Simplified management of system resources and processes
c) Enhanced performance due to reduced overhead in communication between layers
d) Improved security through isolation and encapsulation of system components
Answer: d) Improved security through isolation and encapsulation of system components

In virtualization, what is the primary purpose of a hypervisor?
a) To provide an interface for user applications to interact with virtual machines.
b) To manage system resources such as CPU, memory, and storage for virtual machines.
c) To emulate hardware components for virtual machines to run operating systems.
d) To create and manage multiple virtual machines on a single physical host.
Answer: d) To create and manage multiple virtual machines on a single physical host.

What distinguishes Type 1 hypervisors from Type 2 hypervisors?
a) Type 1 hypervisors run directly on the physical hardware, while Type 2 hypervisors run on top of a host operating system.
b) Type 1 hypervisors support full virtualization, while Type 2 hypervisors support para-virtualization.
c) Type 1 hypervisors are optimized for desktop virtualization, while Type 2 hypervisors are designed for server virtualization.
d) Type 1 hypervisors provide better performance than Type 2 hypervisors due to direct hardware access.
Answer: a) Type 1 hypervisors run directly on the physical hardware, while Type 2 hypervisors run on top of a host operating system.

What is the purpose of a watchdog timer in embedded systems?
a) To synchronize timing signals between hardware components
b) To monitor system health and reset the system if it becomes unresponsive
c) To measure the execution time of critical system tasks
d) To generate precise time references for synchronization purposes
Answer: b) To monitor system health and reset the system if it becomes unresponsive

Which component generates the system clock used by timers in operating systems?
a) Real-time clock (RTC)
b) Central Processing Unit (CPU)
c) Programmable interval timer (PIT)
d) Memory Management Unit (MMU)
Answer: a) Real-time clock (RTC)

Which timer resolution is typically used for system timing in modern operating systems?
a) Milliseconds
b) Microseconds
c) Nanoseconds
d) Picoseconds
Answer: b) Microseconds

In the context of operating systems, what is the primary purpose of a system call?
a) To manage system resources such as CPU and memory allocation
b) To facilitate communication between different processes running on the same system
c) To provide an interface for user-level applications to request services from the kernel
d) To handle interrupts generated by peripheral devices connected to the system
Answer: c) To provide an interface for user-level applications to request services from the kernel

Which component of the operating system is responsible for handling system calls?
a) Kernel
b) Shell
c) Device drivers
d) Interrupt handler
Answer: a) Kernel

Which system call is used to create a new process in an operating system?
a) fork()
b) exec()
c) wait()
d) exit()
Answer: a) fork()

Which system call is used by a parent process to wait for the termination of its child process?
a) fork()
b) exec()
c) wait()
d) exit()
Answer: c) wait()

In a Unix-like operating system, which system call is used to terminate the execution of a process?
a) fork()
b) exec()
c) wait()
d) exit()
Answer: d) exit()

What is the purpose of the open() system call in file management?
a) To create a new file in the file system
b) To open an existing file and obtain a file descriptor for subsequent operations
c) To close an open file descriptor and release associated resources
d) To read data from a file into memory buffer
Answer: b) To open an existing file and obtain a file descriptor for subsequent operations

What is the primary purpose of a process control block (PCB) in operating systems?
a) To store the executable code of a process
b) To manage the allocation of system resources to processes
c) To maintain information about the state and attributes of a process
d) To provide inter-process communication between multiple processes
Answer: c) To maintain information about the state and attributes of a process

What is a characteristic of a multithreaded process?
a) It executes multiple processes simultaneously on different CPU cores
b) It shares the same address space and resources among multiple threads
c) It cannot be preempted by the operating system scheduler
d) It has a separate process control block (PCB) for each thread
Answer: b) It shares the same address space and resources among multiple threads

Which state represents a process that is waiting for an event to occur, such as I/O completion?
a) Running
b) Ready
c) Blocked
d) Terminated
Answer: c) Blocked

Which scheduling algorithm aims to minimize the average waiting time of processes in the ready queue?
a) Round Robin
b) Shortest Job Next (SJN)
c) First Come, First Served (FCFS)
d) Shortest Remaining Time First (SRTF)
Answer: d) Shortest Remaining Time First (SRTF)

In the context of process synchronization, what is the purpose of a semaphore?
a) To prevent race conditions by providing mutual exclusion to shared resources
b) To provide a communication channel between processes for message passing
c) To schedule the execution of critical sections in a concurrent program
d) To allocate and deallocate memory dynamically during process execution
Answer: a) To prevent race conditions by providing mutual exclusion to shared resources

Which statement accurately describes the difference between a process and a thread?
a) A process contains multiple threads, while a thread is a lightweight process.
b) A process is created by the operating system, while a thread is created by the application.
c) A process has its own address space, while threads share the same address space within a process.
d) A process can execute multiple instructions simultaneously, while a thread executes instructions sequentially.
Answer: c) A process has its own address space, while threads share the same address space within a process.

What is the main challenge associated with concurrent access to shared resources in multi-processing systems?
a) Deadlock
b) Starvation
c) Race conditions
d) Priority inversion
Answer: c) Race conditions

Which scheduling policy aims to provide each process with an equal share of CPU time in multi-processing systems?
a) Round Robin
b) First Come, First Served (FCFS)
c) Shortest Job Next (SJN)
d) Priority Scheduling
Answer: a) Round Robin

What is the purpose of a critical section in concurrent programming?
a) To define a section of code that can be executed by multiple processes simultaneously
b) To provide a mechanism for processes to communicate and synchronize their activities
c) To protect shared resources from concurrent access by multiple processes
d) To allocate CPU time to processes based on their priority
Answer: c) To protect shared resources from concurrent access by multiple processes

What is a potential drawback of using locks for synchronization in multi-processing systems?
a) Deadlock
b) Priority inversion
c) Busy waiting
d) Starvation
Answer: c) Busy waiting

In the context of multi-processing, what is the purpose of a semaphore?
a) To protect critical sections of code from concurrent access
b) To provide a communication channel between processes for message passing
c) To allocate and deallocate memory dynamically during process execution
d) To control access to shared resources and prevent race conditions
Answer: d) To control access to shared resources and prevent race conditions

What is the role of a monitor in concurrent programming?
a) To provide a mechanism for processes to communicate and coordinate their activities
b) To protect shared resources from concurrent access by multiple processes
c) To allow only one process at a time to execute a critical section of code
d) To encapsulate shared data and the operations that manipulate it, ensuring mutual exclusion
Answer: d) To encapsulate shared data and the operations that manipulate it, ensuring mutual exclusion

What is the significance of the "Zombie" state in process management within operating systems?
a) It indicates a process that is waiting for an event to occur, such as I/O completion.
b) It represents a process that has been terminated but still has an entry in the process table.
c) It signifies a process that has been suspended and can be resumed later.
d) It denotes a process that is actively executing instructions on the CPU.
Answer: b) It represents a process that has been terminated but still has an entry in the process table.

What does the "Terminated" state of a process signify in operating systems?
a) The process is waiting for an event to occur, such as I/O completion.
b) The process has completed execution and released all allocated resources.
c) The process is waiting for input or output operations to complete.
d) The process is actively executing instructions on the CPU.
Answer: b) The process has completed execution and released all allocated resources.

Which state indicates that a process is waiting for an event, such as I/O completion, to occur?
a) Running
b) Ready
c) Blocked
d) New
Answer: c) Blocked

What is the role of the "Ready" state in process management within operating systems?
a) It signifies that a process has completed execution and released all resources.
b) It indicates that a process is waiting for an event, such as I/O completion, to occur.
c) It denotes that a process is waiting for input or output operations to complete.
d) It signifies that a process is ready and waiting to be assigned to a CPU for execution.
Answer: d) It signifies that a process is ready and waiting to be assigned to a CPU for execution.

Which state indicates that a process is actively executing instructions on the CPU?
a) Ready
b) Blocked
c) Running
d) Terminated
Answer: c) Running

What is the primary purpose of a context switch in operating systems?
a) To save the state of a process and restore the state of another process for execution.
b) To allocate CPU time to processes based on their priority and scheduling algorithm.
c) To synchronize access to shared resources among concurrent processes.
d) To handle interrupts generated by peripheral devices connected to the system.
Answer: a) To save the state of a process and restore the state of another process for execution.

Which component of the operating system is responsible for performing context switches?
a) Kernel
b) Shell
c) Device drivers
d) Scheduler
Answer: a) Kernel

In the context of multitasking operating systems, what is a consequence of frequent context switches?
a) Improved system responsiveness and throughput
b) Increased overhead due to saving and restoring process state
c) Reduced complexity in managing system resources
d) Enhanced fault tolerance and reliability
Answer: b) Increased overhead due to saving and restoring process state

Which factor influences the duration of a context switch in operating systems?
a) The speed of the CPU
b) The amount of available memory
c) The number of processes in the system
d) The efficiency of the scheduling algorithm
Answer: a) The speed of the CPU

What is the purpose of saving the state of a process during a context switch?
a) To allow the process to resume execution from the point where it was interrupted.
b) To allocate CPU time to processes based on their priority and scheduling algorithm.
c) To synchronize access to shared resources among concurrent processes.
d) To handle interrupts generated by peripheral devices connected to the system.
Answer: a) To allow the process to resume execution from the point where it was interrupted.

In preemptive multitasking systems, what triggers a context switch?
a) A process voluntarily yields control of the CPU.
b) An interrupt occurs, such as a timer interrupt or I/O operation completion.
c) A process requests access to a shared resource.
d) A process completes its execution and exits.
Answer: b) An interrupt occurs, such as a timer interrupt or I/O operation completion.

In the context of non-producible execution, what term describes a situation where a process is indefinitely delayed waiting for an event to occur?
a) Deadlock
b) Starvation
c) Thrashing
d) Spinning
Answer: b) Starvation

In the context of non-producible execution, what term describes a situation where multiple processes are waiting indefinitely for a resource held by another process?
a) Starvation
b) Deadlock
c) Thrashing
d) Spinning
Answer: b) Deadlock

Which IPC mechanism provides direct access to a portion of memory shared between multiple processes?
a) Message passing
b) Shared memory
c) Semaphores
d) Pipes
Answer: b) Shared memory

What is a characteristic of synchronous message passing in IPC?
a) The sender and receiver do not need to be synchronized during communication.
b) The sender waits until the receiver has acknowledged receipt of the message.
c) Messages are stored in a buffer for asynchronous delivery to the receiver.
d) Communication occurs without the need for explicit coordination between processes.
Answer: b) The sender waits until the receiver has acknowledged receipt of the message.

Which IPC mechanism is commonly used for communication between processes running on different computers in a network?
a) Shared memory
b) Message passing
c) Semaphores
d) Pipes
Answer: b) Message passing

In the context of IPC, what is the purpose of a semaphore?
a) To provide direct access to shared memory between processes.
b) To transfer data between processes in a synchronized manner.
c) To synchronize access to shared resources among concurrent processes.
d) To establish a one-way communication channel between processes.
Answer: c) To synchronize access to shared resources among concurrent processes.

Which IPC mechanism provides a unidirectional communication channel between a pair of processes?
a) Shared memory
b) Message passing
c) Semaphores
d) Pipes
Answer: d) Pipes

What role do sockets play in inter-process communication in networked environments?
a) They provide access to shared memory regions between remote processes.
b) They facilitate message passing between processes running on the same computer.
c) They establish communication channels for processes running on different computers.
d) They synchronize access to shared resources among concurrent processes.
Answer: c) They establish communication channels for processes running on different computers.

In the context of multi-threaded programming, what term describes a situation where one thread modifies a shared resource while another thread is in the process of reading or modifying it?
a) Deadlock
b) Starvation
c) Race condition
d) Critical section
Answer: c) Race condition

What is the primary role of a mutex lock in mitigating race conditions?
a) To provide mutual exclusion to shared resources among threads
b) To allow multiple threads to access shared resources simultaneously
c) To facilitate communication between threads in a multi-threaded application
d) To allocate CPU time to threads based on their priority
Answer: a) To provide mutual exclusion to shared resources among threads

In the context of mutual exclusion, what is the purpose of a critical section?
a) To execute code concurrently on multiple threads
b) To synchronize access to shared resources among processes
c) To allow processes to communicate via message passing
d) To allocate CPU time to processes based on their priority
Answer: b) To synchronize access to shared resources among processes

In the context of mutual exclusion, what is a drawback of using spinlocks?
a) High overhead due to frequent context switching
b) Deadlock between threads waiting for the lock to be released
c) Inefficient utilization of CPU resources
d) Limited scalability for large numbers of threads
Answer: c) Inefficient utilization of CPU resources

What measure can be taken to mitigate the performance impact of mutual exclusion in multi-threaded programs?
a) Increasing the number of threads accessing shared resources
b) Optimizing the critical section to reduce the duration of locks
c) Using spinlocks instead of mutex locks for synchronization
d) Allowing concurrent access to critical sections by multiple threads
Answer: b) Optimizing the critical section to reduce the duration of locks

What defines a critical region in operating systems?
a) It is a region of memory reserved for system processes.
b) It is a section of code where shared resources are accessed and must be protected from concurrent access.
c) It is a part of the CPU cache dedicated to storing frequently accessed data.
d) It is a region of disk storage used for storing system logs and error messages.
Answer: b) It is a section of code where shared resources are accessed and must be protected from concurrent access.

Which statement accurately describes the purpose of a semaphore in managing critical regions?
a) Semaphores ensure that only one process can enter the critical section at a time.
b) Semaphores allow multiple processes to access shared resources simultaneously.
c) Semaphores facilitate communication between processes via message passing.
d) Semaphores prevent race conditions by coordinating access to shared resources.
Answer: d) Semaphores prevent race conditions by coordinating access to shared resources.

What problem does the Peterson solution aim to solve in operating systems?
a) Deadlock
b) Race condition
c) Starvation
d) Thrashing
Answer: b) Race condition

What is the primary purpose of the Peterson solution in concurrent programming?
a) To prevent multiple processes from accessing shared resources simultaneously
b) To provide mutual exclusion to shared resources among concurrent processes
c) To allow processes to communicate via message passing
d) To allocate CPU time to processes based on their priority
Answer: b) To provide mutual exclusion to shared resources among concurrent processes

Which statement accurately describes the Peterson solution?
a) It ensures that only one process can enter the critical section at a time.
b) It allows multiple processes to access shared resources simultaneously.
c) It facilitates communication between processes via message passing.
d) It prevents race conditions by coordinating access to shared resources.
Answer: a) It ensures that only one process can enter the critical section at a time.

How does the Peterson solution achieve mutual exclusion?
a) By using busy waiting within the critical section
b) By implementing spinlocks instead of mutex locks
c) By employing proper coordination and synchronization between processes
d) By allowing multiple processes to hold locks simultaneously
Answer: c) By employing proper coordination and synchronization between processes

What data structure is used in the Peterson solution to coordinate access to shared resources?
a) Semaphore
b) Mutex lock
c) Barrier
d) Flag array
Answer: d) Flag array

In the context of operating systems, what is the purpose of the "wake up" operation?
a) To put a process to sleep and suspend its execution temporarily
b) To terminate a process and release its allocated resources
c) To resume the execution of a process that was previously sleeping
d) To allocate CPU time to a process based on its priority
Answer: c) To resume the execution of a process that was previously sleeping

What triggers the "wake up" operation in operating systems?
a) The completion of a disk I/O operation
b) The expiration of a timer set by the process
c) An interrupt generated by peripheral devices
d) A system call made by another process
Answer: a) The completion of a disk I/O operation

What is the primary advantage of using the "wake up sleep" mechanism in operating systems?
a) It reduces the overhead of context switching
b) It allows processes to communicate via message passing
c) It improves system responsiveness by efficiently managing CPU resources
d) It ensures fairness and prevents starvation among concurrent processes
Answer: c) It improves system responsiveness by efficiently managing CPU resources

In operating systems, what is the primary purpose of a pipe?
a) To allocate memory resources to processes
b) To synchronize access to shared resources among concurrent processes
c) To establish a unidirectional communication channel between processes
d) To allocate CPU time to processes based on their priority
Answer: c) To establish a unidirectional communication channel between processes

Which statement accurately describes a pipe in operating systems?
a) It allows bidirectional communication between processes.
b) It provides direct access to shared memory regions between processes.
c) It is a first-in-first-out (FIFO) data structure for inter-process communication.
d) It facilitates communication between processes via message passing.
Answer: c) It is a first-in-first-out (FIFO) data structure for inter-process communication.

What is a characteristic of a pipe in operating systems?
a) It allows bidirectional communication between processes.
b) It establishes a point-to-point connection between two processes.
c) It provides direct access to shared memory regions between processes.
d) It supports multicast communication among multiple processes.
Answer: b) It establishes a point-to-point connection between two processes.

What happens if a process tries to read from an empty pipe?
a) The process is blocked until data becomes available in the pipe.
b) The pipe returns an error indicating that it is empty.
c) The process receives a null value indicating that no data is available.
d) The process enters a sleep state until data becomes available in the pipe.
Answer: a) The process is blocked until data becomes available in the pipe.

What mechanism does the operating system use to implement pipes?
a) Shared memory regions
b) Semaphore-based synchronization
c) File descriptors
d) System calls
Answer: c) File descriptors

In the dining philosophers problem, what does each philosopher represent?
a) A process competing for access to a shared resource
b) A thread attempting to acquire a mutex lock
c) A CPU core executing a critical section of code
d) A device waiting for an interrupt to be serviced
Answer: a) A process competing for access to a shared resource

What is the main challenge posed by the dining philosophers problem in operating systems?
a) Deadlock
b) Starvation
c) Race condition
d) Context switching overhead
Answer: a) Deadlock

How many resources (forks) does each philosopher require to eat in the dining philosophers problem?
a) One
b) Two
c) Three
d) Four
Answer: b) Two

What is the purpose of using a semaphore in the dining philosophers problem?
a) To prevent deadlock between philosophers
b) To provide mutual exclusion to shared resources (forks)
c) To allow multiple philosophers to access forks simultaneously
d) To synchronize access to the dining table among philosophers
Answer: b) To provide mutual exclusion to shared resources (forks)

What condition must be satisfied to avoid deadlock in the dining philosophers problem?
a) At least one philosopher must be able to acquire all required resources.
b) Each philosopher must wait for the right fork before attempting to acquire the left fork.
c) Philosophers must release resources in a strict order to prevent circular wait.
d) Philosophers must access resources concurrently without synchronization.
Answer: c) Philosophers must release resources in a strict order to prevent circular wait.

What is a primary advantage of using multithreading in operating systems?
a) Reduced memory consumption
b) Enhanced fault tolerance
c) Improved responsiveness and concurrency
d) Simplified programming model
Answer: c) Improved responsiveness and concurrency

In multithreading, what does a thread represent?
a) A separate process with its own memory space
b) A unit of execution within a process sharing the same memory space
c) An independent process communicating via message passing
d) A hardware component facilitating communication between processes
Answer: b) A unit of execution within a process sharing the same memory space

How does multithreading differ from multiprocessing?
a) Multithreading involves multiple processes executing on different CPUs.
b) Multiprocessing allows multiple threads to execute within a single process.
c) Multithreading shares the same memory space among threads within a process.
d) Multiprocessing improves fault tolerance by isolating processes from each other.
Answer: c) Multithreading shares the same memory space among threads within a process.

What distinguishes user-level threads from kernel-level threads in operating systems?
a) User-level threads have direct access to hardware resources.
b) Kernel-level threads are managed entirely by the operating system.
c) User-level threads are faster due to their proximity to the CPU.
d) Kernel-level threads can be created and managed by user applications.
Answer: b) Kernel-level threads are managed entirely by the operating system.

What mechanism does the user-level thread library use to handle blocking system calls?
a) It switches to a different user-level thread until the call completes.
b) It delegates the call to the kernel-level thread manager.
c) It suspends all user-level threads until the call completes.
d) It cancels the blocking call and continues execution.
Answer: a) It switches to a different user-level thread until the call completes.

What scenario could lead to a disadvantage of user-level threads?
a) When there is a need for fine-grained thread control
b) When portability across different operating systems is required
c) When the application requires high performance and scalability
d) When the application relies heavily on system calls for I/O operations
Answer: d) When the application relies heavily on system calls for I/O operations

What is a characteristic of priority-based scheduling algorithms?
a) They ensure fairness by allocating equal CPU time to all processes.
b) They prioritize processes based on their arrival time.
c) They assign each process a numerical priority value.
d) They rely on the execution time of processes to make scheduling decisions.
Answer: c) They assign each process a numerical priority value.

What scheduling algorithm aims to minimize the average turnaround time of processes?
a) Shortest remaining time first (SRTF) scheduling
b) Round-robin scheduling
c) Shortest job next (SJN) scheduling
d) First-come, first-served (FCFS) scheduling
Answer: a) Shortest remaining time first (SRTF) scheduling

What is a drawback of using shortest job next (SJN) scheduling?
a) It may lead to starvation of long-running processes.
b) It requires knowledge of the execution time of each process.
c) It does not support preemptive scheduling.
d) It results in higher context switching overhead.
Answer: b) It requires knowledge of the execution time of each process.

What scheduling algorithm is known for its simplicity and fairness?
a) First-come, first-served (FCFS) scheduling
b) Round-robin scheduling
c) Multilevel feedback queue scheduling
d) Shortest job next (SJN) scheduling
Answer: b) Round-robin scheduling

Which scheduling algorithm allows processes to share the CPU equally over time?
a) Priority-based scheduling
b) Round-robin scheduling
c) Shortest remaining time first (SRTF) scheduling
d) Multilevel feedback queue scheduling
Answer: b) Round-robin scheduling

What characteristic distinguishes preemptive scheduling from non-preemptive scheduling?
a) Preemptive scheduling allows processes to voluntarily yield the CPU.
b) Preemptive scheduling forcibly interrupts processes to allocate CPU time to higher-priority processes.
c) Non-preemptive scheduling allows processes to execute until they voluntarily release the CPU.
d) Non-preemptive scheduling allocates CPU time based on process priority.
Answer: b) Preemptive scheduling forcibly interrupts processes to allocate CPU time to higher-priority processes.

What is a limitation of shortest job next (SJN) scheduling?
a) It may lead to process starvation.
b) It requires precise knowledge of CPU burst times.
c) It is not suitable for preemptive scheduling.
d) It incurs high overhead due to frequent context switches.
Answer: b) It requires precise knowledge of CPU burst times.

Which scheduling algorithm dynamically adjusts process priorities based on their behavior?
a) Shortest remaining time first (SRTF) scheduling
b) Multilevel feedback queue scheduling
c) Priority-based scheduling
d) Round-robin scheduling
Answer: b) Multilevel feedback queue scheduling

Which scheduling policy aims to provide better response time for interactive processes?
a) First-come, first-served (FCFS) scheduling
b) Priority-based scheduling
c) Shortest job next (SJN) scheduling
d) Round-robin scheduling
Answer: b) Priority-based scheduling

What scheduling algorithm can lead to the convoy effect?
a) Priority-based scheduling
b) Shortest remaining time first (SRTF) scheduling
c) First-come, first-served (FCFS) scheduling
d) Round-robin scheduling
Answer: c) First-come, first-served (FCFS) scheduling

Which scheduling policy is prone to the phenomenon of aging?
a) Shortest job next (SJN) scheduling
b) Priority-based scheduling
c) Multilevel feedback queue scheduling
d) Round-robin scheduling
Answer: c) Multilevel feedback queue scheduling

What is a potential drawback of using spinlocks for synchronization?
a) Increased overhead due to frequent context switches
b) Risk of priority inversion
c) Higher likelihood of deadlock
d) Higher CPU utilization
Answer: d) Higher CPU utilization

Which synchronization primitive allows threads to temporarily release a lock and wait for a condition to be met?
a) Barrier
b) Mutex lock
c) Semaphore
d) Condition variable
Answer: d) Condition variable

Which synchronization mechanism allows threads to synchronize their execution at a predetermined point?
a) Mutex lock
b) Barrier
c) Condition variable
d) Semaphore
Answer: b) Barrier

What characteristic distinguishes a mutex lock from a spinlock in synchronization?
a) Mutex locks are non-blocking, while spinlocks may cause threads to wait indefinitely.
b) Mutex locks provide priority inheritance, while spinlocks do not.
c) Mutex locks are implemented in user space, while spinlocks are implemented in kernel space.
d) Mutex locks are less efficient for short critical sections compared to spinlocks.
Answer: a) Mutex locks are non-blocking, while spinlocks may cause threads to wait indefinitely.

What is the primary purpose of a reader-writer lock in synchronization?
a) To allow multiple threads to read a shared resource simultaneously, but only one thread to write at a time
b) To prevent deadlock among multiple readers accessing the same resource
c) To ensure that writers have priority over readers in accessing a shared resource
d) To provide mutual exclusion for both readers and writers accessing a shared resource
Answer: a) To allow multiple threads to read a shared resource simultaneously, but only one thread to write at a time

What is a necessary condition for deadlock to occur in a system?
A) Mutual exclusion
B) Hold and wait
C) No preemption
D) Circular wait
Answer: D) Circular wait

Which algorithm employs a wait-die scheme to prevent deadlocks in a system?
A) Banker's algorithm
B) Wait-for graph algorithm
C) Resource allocation graph algorithm
D) Priority inheritance protocol
Answer: A) Banker's algorithm

What is the primary disadvantage of using the Banker's algorithm for deadlock avoidance?
A) It may lead to resource starvation
B) It requires a centralized authority
C) It cannot detect deadlocks
D) It is computationally expensive
Answer: D) It is computationally expensive

Which of the following is NOT a method to handle deadlocks in operating systems?
A) Deadlock prevention
B) Deadlock detection and recovery
C) Deadlock avoidance
D) Deadlock acceptance
Answer: D) Deadlock acceptance

Which approach allows the system to enter a deadlock state and then recover from it?
A) Deadlock prevention
B) Deadlock detection
C) Deadlock avoidance
D) Deadlock recovery
Answer: D) Deadlock recovery

In deadlock prevention, what does the system do to prevent the "hold and wait" condition?
A) Resource allocation is done in a way that no circular wait is possible
B) Resources are preempted if necessary
C) Processes are terminated if they request resources that cannot be granted immediately
D) Processes are granted all requested resources at once
Answer: A) Resource allocation is done in a way that no circular wait is possible.

Which technique allows a process to request resources incrementally rather than all at once, thus reducing the possibility of deadlock?
A) Resource allocation graph algorithm
B) Banker's algorithm
C) Priority inheritance protocol
D) Incremental resource allocation
Answer: D) Incremental resource allocation

In the Banker's algorithm, what is the purpose of the safety algorithm?
A) To detect deadlocks
B) To allocate resources optimally
C) To ensure that there is a safe sequence of resource allocation
D) To recover from deadlocks
Answer: C) To ensure that there is a safe sequence of resource allocation

What does the cycle in a resource allocation graph represent?
A) A potential deadlock
B) Resource allocation history
C) Priority of processes
D) The number of instances of a resource
Answer: A) A potential deadlock

In deadlock detection, what technique is commonly used to detect cycles in the resource allocation graph?
A) Depth-first search
B) Breadth-first search
C) Topological sorting
D) Dijkstra's algorithm
Answer: A) Depth-first search

Which of the following is NOT a resource allocation scheme used to avoid deadlocks?
A) Resource preemption
B) Optimistic resource allocation
C) Wait-die scheme
D) Wound-wait scheme
Answer: B) Optimistic resource allocation

In a resource allocation graph, what does a directed edge from a process node to a resource node represent?
A) The process is holding the resource
B) The process is requesting the resource
C) The resource is allocated to the process
D) The resource is available for allocation
Answer: B) The process is requesting the resource

Which of the following statements about a resource allocation graph is true?
A) A cycle in the graph indicates a deadlock
B) Acyclic graphs cannot represent resource allocation scenarios
C) Only processes are represented as nodes in the graph
D) Resource nodes always have directed edges pointing to process nodes
Answer: A) A cycle in the graph indicates a deadlock

In a resource allocation graph, what does a directed edge from a resource node to a process node represent?
A) The resource is available for allocation
B) The resource is being released by the process
C) The process is holding the resource
D) The resource is requested by the process
Answer: C) The process is holding the resource

In a resource allocation graph, how are wait-for edges represented?
A) Directed edges from processes to other processes
B) Directed edges from resources to processes
C) Directed edges from processes to resources
D) Undirected edges between processes
Answer: A) Directed edges from processes to other processes

What is the primary purpose of a resource allocation graph in operating systems?
A) To visualize the allocation of physical memory
B) To represent the allocation of CPU resources
C) To detect and analyze potential deadlocks
D) To optimize the scheduling of I/O operations
Answer: C) To detect and analyze potential deadlocks

How does a wait-for graph algorithm handle resource requests and releases?
A) It maintains a snapshot of the system state
B) It updates the graph dynamically
C) It requires explicit notification from processes
D) It ignores resource requests and releases
Answer: B) It updates the graph dynamically

In a deadlock detection algorithm for multiple types of resources, which data structure is commonly used to represent the allocation and request status of resources?
A) Wait-for graph
B) Resource allocation graph
C) Priority queue
D) Binary tree
Answer: B) Resource allocation graph

In the Banker's algorithm for multiple types of resources, what does the term "safety sequence" refer to?
A) A sequence of processes that can be safely terminated
B) A sequence of resource requests that can be safely granted
C) A sequence of processes that can be safely executed without causing a deadlock
D) A sequence of resource releases that can prevent deadlocks
Answer: C) A sequence of processes that can be safely executed without causing a deadlock

Which of the following conditions must be satisfied for a resource request to be granted in the Banker's algorithm?
A) The system must be in a safe state after granting the request
B) The requesting process must have the highest priority
C) The requesting process must have been waiting the longest
D) The requesting process must have the most resources already allocated
Answer: A) The system must be in a safe state after granting the request

In the Banker's algorithm, what is the significance of the "maximum" matrix?
A) It represents the maximum resources each process may request
B) It represents the total available resources in the system
C) It represents the resources currently allocated to each process
D) It represents the resources currently available for allocation
Answer: A) It represents the maximum resources each process may request

What is the purpose of the Banker's algorithm's "need" matrix?
A) It represents the resources currently allocated to each process
B) It represents the resources currently available for allocation
C) It represents the difference between the maximum and currently allocated resources for each process
D) It represents the total available resources in the system
Answer: C) It represents the difference between the maximum and currently allocated resources for each process

What data structure is commonly used in deadlock detection algorithms for single type resources to represent the allocation and request status of resources?
A) Wait-for graph
B) Resource allocation graph
C) Priority queue
D) Binary tree
Answer: A) Wait-for graph

In the context of concurrency control, what does the "two-phase locking" protocol aim to achieve?
A) Prevention of communication deadlocks
B) Elimination of livelock situations
C) Avoidance of starvation
D) Ensuring serializability of transactions
Answer: D) Ensuring serializability of transactions

What is a characteristic of the two-phase locking protocol that distinguishes it from other concurrency control mechanisms?
A) It allows transactions to release locks before completion
B) It requires all locks to be acquired at once
C) It allows locks to be acquired and released in two separate phases
D) It prioritizes transactions based on their timestamps
Answer: C) It allows locks to be acquired and released in two separate phases

What distinguishes livelock from deadlock in terms of behavior?
A) Livelock involves processes continuously changing their states without making progress
B) Livelock is characterized by processes waiting indefinitely for resources
C) Livelock occurs when processes are unable to proceed due to conflicting resource requests
D) Livelock results from a circular chain of dependencies among processes
Answer: A) Livelock involves processes continuously changing their states without making progress

What is a common strategy to mitigate livelock situations in operating systems?
A) Increasing the system's timeout thresholds
B) Introducing randomness into scheduling decisions
C) Employing backoff mechanisms for resource acquisition
D) Rebooting the affected processes
Answer: C) Employing backoff mechanisms for resource acquisition

In the context of resource allocation, what does "starvation" refer to?
A) Processes being unable to proceed due to conflicting resource requests
B) Processes continuously changing their states without making progress
C) Processes waiting indefinitely for resources
D) Processes being denied access to resources they require
Answer: C) Processes waiting indefinitely for resources

What is a potential consequence of starvation in a system?
A) Deadlocks occurring frequently
B) Processes consuming excessive CPU cycles
C) Reduced system throughput
D) Increased likelihood of livelock situations
Answer: C) Reduced system throughput

Which mechanism is commonly used to address starvation in scheduling algorithms?
A) Aging
B) Preemption
C) Round-robin scheduling
D) Priority inversion
Answer: A) Aging

How does the concept of aging mitigate starvation in scheduling algorithms?
A) By reducing the priority of long-waiting processes over time
B) By preempting processes with lower priority
C) By randomly selecting processes for execution
D) By restarting the system periodically
Answer: A) By reducing the priority of long-waiting processes over time

Which scenario is most likely to lead to a livelock situation in a distributed system?
A) Two processes repeatedly responding to each other's messages without making progress
B) A process waiting indefinitely for a response from a remote server
C) Two processes holding resources and waiting for resources held by each other
D) A process waiting indefinitely for a lock held by another process
Answer: A) Two processes repeatedly responding to each other's messages without making progress


